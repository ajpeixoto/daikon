// Copyright 2005 - 2024 Talend, Inc., All Rights Reserved - www.talend.com
package org.talend.daikon.serialize.jsonschema;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.TimeZone;

import org.apache.commons.lang3.StringUtils;
import org.talend.daikon.exception.TalendRuntimeException;
import org.talend.daikon.properties.Properties;
import org.talend.daikon.properties.property.Property;

/**
 * Generate json-schema and ui-schema from {@ComponentProperties}, and only consider {@Property} and
 * {@Properties} inside.
 */
public class JsonBaseTool {

    /**
     * Date format for date-time (https://github.com/mozilla-services/react-jsonschema-form#string-formats)
     */
    protected static final DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.000'Z'");

    private static final String LIST_TYPE = List.class.getName();

    static {
        dateFormatter.setTimeZone(TimeZone.getTimeZone("UTC"));
    }

    /**
     * the className is generated by TypeUtils.toString(), this method is try to find the class by this string but may
     * failed
     *
     * @param className
     * @return
     */
    protected static Class findClass(ClassLoader cl, String className) {
        Class<?> aClass = null;
        try {
            aClass = cl.loadClass(className);
        } catch (ClassNotFoundException e) {
            int lastPosition = className.lastIndexOf(".");
            if (lastPosition < 0) {
                throw new RuntimeException(e);
            }
            className = className.substring(0, lastPosition) + "$" + className.substring(lastPosition + 1);
            return findClass(cl, className);
        }
        return aClass;
    }

    /**
     * The className is generated by TypeUtils.toString(), check if the className is start with java.util.List enough
     *
     * @param className
     * @return
     */
    protected static boolean isListClass(String className) {
        return StringUtils.startsWith(className, LIST_TYPE);
    }

    /**
     *
     * @return the type corresponding to list
     */
    protected static String getListType() {
        return LIST_TYPE;
    }

    protected static String getListInnerClassName(String className) {
        return className.substring((LIST_TYPE + "<").length(), className.length() - 1);
    }

    protected static List<Property> getSubProperty(Properties cProperties) {
        List<Property> propertyList = new ArrayList<>();
        Field[] allFields = cProperties.getClass().getFields();
        for (Field field : allFields) {
            if (Property.class.isAssignableFrom(field.getType()) && !Modifier.isTransient(field.getModifiers())) {
                try {
                    propertyList.add((Property) field.get(cProperties));
                } catch (IllegalAccessException e) {
                    throw TalendRuntimeException.createUnexpectedException(e);
                }
            }
        }
        return propertyList;
    }

    protected static List<Properties> getSubProperties(Properties cProperties) {
        List<Properties> propertiesList = new ArrayList<>();
        Field[] allFields = cProperties.getClass().getFields();
        for (Field field : allFields) {
            if (Properties.class.isAssignableFrom(field.getType()) && !Modifier.isTransient(field.getModifiers())) {
                try {
                    propertiesList.add((Properties) field.get(cProperties));
                } catch (IllegalAccessException e) {
                    throw TalendRuntimeException.createUnexpectedException(e);
                }
            }
        }
        return propertiesList;
    }

}
